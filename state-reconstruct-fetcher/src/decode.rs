use std::vec::Vec;
use std::option::Option;

pub enum Chunk {
    Number(u32),
    Buffer(Vec<u8>),
}

pub struct DecodeResult {
    opcode: u8,
    number: u32,
    size: u8,
}

pub fn decode_flatten(buffer: Vec<u8>) -> Option<Vec<u8>> {
    let chunks = decompile(buffer)?;
    let mut result: Vec<u8> = Vec::new();
    for chunk in chunks {
        match chunk {
            Chunk::Number(n) => {
                return None;
            },
            Chunk::Buffer(b) => {
                result.extend(b);
            },
        }
    }
    Some(result)
}

pub fn decompile(buffer: Vec<u8>) -> Option<Vec<Chunk>> {
    let mut chunks: Vec<Chunk> = Vec::new();
    let mut i = 0;

    while i < buffer.len() {
        let opcode = buffer[i];

        if opcode > OPS::OP_0 && opcode <= OPS::OP_PUSHDATA4 {
            let d = decode(&buffer, i);

            match d {
                None => return None,
                Some(d) => {
                    i += d.size as usize;

                    if i + d.number as usize > buffer.len() {
                        return None;
                    }

                    let data = buffer[i..i + d.number as usize].to_vec();
                    i += d.number as usize;

                    match as_minimal_op(&data) {
                        None => chunks.push(Chunk::Buffer(data)),
                        Some(op) => chunks.push(Chunk::Number(op as u32)),
                    }
                }
            }
        } else {
            chunks.push(Chunk::Number(opcode as u32));
            i += 1;
        }
    }

    Some(chunks)
}

pub fn as_minimal_op(buffer: &Vec<u8>) -> Option<u8> {
    if buffer.len() == 0 {
        return Some(OPS::OP_0);
    }
    if buffer.len() != 1 {
        return None;
    }
    if buffer[0] >= 1 && buffer[0] <= 16 {
        return Some(OPS::OP_RESERVED + buffer[0]);
    }
    if buffer[0] == 0x81 {
        return Some(OPS::OP_1NEGATE);
    }
    None
}

pub fn decode(buffer: &Vec<u8>, offset: usize) -> Option<DecodeResult> {
    let opcode = buffer[offset];
    let num: u32;
    let size: u8;

    if opcode < OPS::OP_PUSHDATA1 {
        num = opcode as u32;
        size = 1;
    } else if opcode == OPS::OP_PUSHDATA1 {
        if offset + 2 > buffer.len() {
            return None;
        }
        num = buffer[offset + 1] as u32;
        size = 2;
    } else if opcode == OPS::OP_PUSHDATA2 {
        if offset + 3 > buffer.len() {
            return None;
        }
        num = (buffer[offset + 1] as u32) | ((buffer[offset + 2] as u32) << 8);
        
        size = 3;
    } else {
        if offset + 5 > buffer.len() {
            return None;
        }
        if opcode != OPS::OP_PUSHDATA4 {
            return None;
        }
        num = (buffer[offset + 1] as u32) | ((buffer[offset + 2] as u32) << 8) | ((buffer[offset + 3] as u32) << 16) | ((buffer[offset + 4] as u32) << 24);

        size = 5;
    }

    Some(DecodeResult {
        opcode,
        number: num,
        size,
    })
}

pub struct OPS;
impl OPS {
    pub const OP_0: u8 = 0;
    pub const OP_PUSHDATA1: u8 = 76;
    pub const OP_PUSHDATA2: u8 = 77;
    pub const OP_PUSHDATA4: u8 = 78;
    pub const OP_1NEGATE: u8 = 79;
    pub const OP_RESERVED: u8 = 80;
}

#[cfg(test)]
mod tests {
    use super::*;
    use hex;

    #[test]
    fn test_decompile() {
        let hex_string = "";
        let buffer = hex::decode(hex_string).expect("Decoding failed");
        let result = decompile(buffer);
        assert!(result.is_some());
        assert_eq!(result.as_ref().unwrap().len(), 9);
        // println!("result {}", result.as_ref().unwrap().len());
        let mut concatenated: Vec<u8> = vec![];
        for chunk in result.as_ref().unwrap() {
            match chunk {
                Chunk::Number(n) => {
                    // println!("Number: {}", n)
                },
                Chunk::Buffer(b) => {
                    concatenated.extend(b)
                    // println!("Buffer of length {}", b.len())
                },
            }
        }
        
        let lengths = result.as_ref().unwrap().iter().map(|c| {
            match c {
                Chunk::Number(_) => 1,
                Chunk::Buffer(b) => b.len(),
            }
        }).collect::<Vec<usize>>();
        assert_eq!(lengths, [520, 520, 520, 520, 520, 520, 520, 520, 270]);
        // println!("concat result {:?}", hex::encode(concatenated));
        let expected_result = "";
        assert_eq!(hex::encode(concatenated), expected_result);

        
    }
}
